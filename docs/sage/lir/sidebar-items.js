window.SIDEBAR_ITEMS = {"enum":[["Arithmetic","An arithmetic operation."],["Comparison","A comparison operation between two values."],["ConstExpr","A compiletime expression."],["Error","An LIR compilation error."],["Expr","TODO: Add variants for `LetProc`, `LetVar`, etc. to support multiple definitions. This way, we don’t overflow the stack with several clones of the environment. A runtime expression."],["Pattern","A pattern which can be matched against an expression."],["Put","Print a value to a given output."],["Type","The representation of a type in the LIR type system."]],"struct":[["And","A boolean “And” operation between two values."],["Assign","An assignment operation. This is used to implement assignment operators like `+=`."],["CoreBuiltin","A builtin pseudo-procedure implemented in the core assembly variant."],["Env","An environment under which expressions and types are compiled and typechecked. This is essentially the scope of an expression."],["Not","A boolean “Not” operation on a value."],["Or","A boolean “Or” operation between two values."],["Procedure","A procedure of LIR code which can be applied to a list of arguments."],["StandardBuiltin","A builtin pseudo-procedure implemented in the standard assembly variant."]],"trait":[["AssignOp","A trait used to implemented an assignment operation."],["BinaryOp","A trait used to implement a binary operation."],["Compile","A trait which allows an LIR expression to be compiled to one of the two variants of the assembly language."],["GetSize","Get the size of something in memory (number of cells)."],["GetType","Get the type associated with a value under a given environment."],["Simplify","Simplify an expression while maintaining structural equality."],["TernaryOp","A trait used to implement a ternary operation."],["TypeCheck","A trait used to enforce type checking."],["UnaryOp","A trait used to implement a unary operation."]]};