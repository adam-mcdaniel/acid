
// Used to represent a value that may or may not exist
enum Option<T> {
    // Some value
    Some(T),
    // No value
    Nothing
}

struct Entry<K, V> {
    // The key of the entry
    key: K,
    // The value of the entry
    val: V
}

struct HashMap<K, V> {
    // The entries of the hashmap
    entries: &mut Option<Entry<K, V>>,
    // The reserved size in memory of the entries
    count_allocated: Int,
    // The number of occupied entries
    count_occupied: Int
}
                  
fun is_some<T>(opt: Option<T>): Bool = match opt {
    of Some(_) => True,
    of Nothing => False
};

fun refer<T>(opt: &Option<T>): Option<&T> {
    let inner = opt as &T;
    if let &of Nothing = opt {
        return Option<&T> of Nothing;
    }
    return Option<&T> of Some(inner);
}

fun refer_mut<T>(opt: &mut Option<T>): Option<&mut T> {
    let inner = opt as &mut T;
    if let &of Nothing = opt {
        return Option<&mut T> of Nothing;
    }
    return Option<&mut T> of Some(inner);
}

fun exit(code: Int): ! {
    print("Exiting with code ", code, "\n");
    while True {
        // Deref a null pointer to cause a segfault
        let error = *(Null as &Int);
    }
}

fun unwrap<T>(opt: Option<T>): T {
    if let of Some(val) = opt {
        return val;
    } else {
        print("Error: Tried to unwrap a None value\n");
        exit(1);
    }
}
  
// Hash a value
fun hash<T>(t: T): Int {
    let size = sizeof(t);
    let ptr = (&t) as &Int;
    
    let mut hashValue = 5381;
    fun left_shift(mut a: Int, mut b: Int): Int {
        while b {
            a *= 2;
            b -= 1;
        }
        return a;
    }

    for let mut i = 0; i < size; i += 1; {
        let mut value = ptr[i];
        while (value != 0) {
            let digit = value % 10;
            hashValue = (left_shift(hashValue, 5) + hashValue) + digit;
            value /= 10;
        }
    }

    if hashValue < 0 {
        hashValue = -hashValue;
    }
    
    return hashValue;
}

fun eq<K>(a: K, b: K): Bool {
    let size = sizeof(a);
    let a_ptr = (&a) as &Int;
    let b_ptr = (&b) as &Int;
    
    for let mut i=0; i<size; i+=1; {
        if a_ptr[i] != b_ptr[i] {
            return False;
        }
    }
    return True;
}

fun Entry_print<K, V>(self: &Entry<K, V>) {
    print("hash: ", hash<K>(self.key), ", key: ", self.key, ", val: ", self.val);
}

fun HashMap_clear<K, V>(self: &mut HashMap<K, V>) {
    for let mut i=0; i < self.count_allocated; i+=1; {
        self.entries[i] = Option<Entry<K, V>> of Nothing;
    }
    self.count_occupied = 0;
}


fun HashMap_new<K, V>(): HashMap<K, V> {
    let size = 1000 * sizeof<Option<Entry<K, V>>>();
    let entries = alloc(size) as &mut Option<Entry<K, V>>;
    let mut self = {
        entries = entries,
        count_allocated = 1000,
        count_occupied = 0
    };
    HashMap_clear<K, V>(&mut self);
    return self;
}

fun HashMap_get<K, V>(self: &HashMap<K, V>, key: K): Option<&V> {
    let mut index = hash<K>(key) % self.count_allocated;
    while is_some<Entry<K, V>>(self.entries[index]) {
        let entry = unwrap<&Entry<K, V>>(refer<Entry<K, V>>(&(self.entries[index])));
        if (eq<K>(entry.key, key)) {
            return Option<&V> of Some(&(entry.val));
        }
        index = (index + 1) % self.count_allocated;  // Linear probing for collision resolution
    }
    return Option<&V> of Nothing;
}

fun HashMap_check_bounds<K, V>(self: &mut HashMap<K, V>) {
    if (self.count_allocated - self.count_occupied) < 100 {
        // Allocate new space
        let old_size = self.count_allocated * sizeof(self.entries[0]);
        let old_entries = self.entries;
        let old_map = {
            entries = old_entries,
            count_occupied = self.count_occupied,
            count_allocated = self.count_allocated
        };

        let new_size = old_size * 2;
        self.count_allocated *= 2;
        self.entries = alloc(new_size) as &Option<Entry<K, V>>;
        HashMap_clear<K, V>(self);

        for let mut i=0; i<old_map.count_allocated; i+=1; {
            if let of Some(old_entry) = old_entries[i] {
                match HashMap_get<K, V>(&old_map, old_entry.key) {
                    of Some(val) => HashMap_put<K, V>(self, old_entry.key, *val),
                    of Nothing => {}
                }
            }
        }
    }
}

fun HashMap_put<K, V>(self: &mut HashMap<K, V>, key: K, val: V) {
    let mut index = hash<K>(key) % self.count_allocated;
    while is_some<Entry<K, V>>(self.entries[index]) {
        let entry = unwrap<&mut Entry<K, V>>(refer_mut<Entry<K, V>>(&mut (self.entries[index])));
        if (eq<K>(entry.key, key)) {
            entry.val = val;  // Update value if key already exists
            return ();
        }
        index = (index + 1) % self.count_allocated;  // Linear probing for collision resolution
    }

    self.entries[index] = Option<Entry<K, V>> of Some({
        key = key,
        val = val
    });
    self.count_occupied += 1;
    
    HashMap_check_bounds<K, V>(self);
}

fun HashMap_print<K, V>(self: &HashMap<K, V>) {
    let mut count = 0;
    if self.count_occupied == 0 {
        print("Empty\n");
        return ();
    }
    print("--------------------------------\n");
    for let mut i=0; i < self.count_allocated; i+=1; {
        if let of Some(entry) = self.entries[i] {
            Entry_print<K, V>(&entry);
            print("\n");
            count += 1;
        }
    }
    print("--------------------------------\n");
}

fun HashMap_drop<K, V>(self: &HashMap<K, V>) {
    print("Freeing ", self.count_allocated, " HashMap Entries\n");
    free(self.entries);
}

struct Point {
    x: Int,
    y: Int
}

fun f(x: Int): Point {
    return {x = x, y = x * x};
}

fun putstr(s: &Char) {
    let mut i = 0;
    while s[i] != '\0' {
        print(s[i]);
        i += 1;
    }
}

fun putstrln(s: &Char) {
    let mut i = 0;
    while s[i] != '\0' {
        print(s[i]);
        i += 1;
    }
    print("\n");
}

fun make_x_str(x_count: Int): &Char {
    let value = alloc((x_count + 32) * sizeof<Char>()) as &mut Char;
    for let mut i=0; i<x_count; i+=1; {
        value[i] = 'x';
    }
    value[x_count] = '\0';
    return value;
}

const INSERT_COUNT = 100;
const CHECK_COUNT = 200;

let mut map = HashMap_new<Point, &Char>();

print("HashMap before inserting:\n");
HashMap_print<Point, &Char>(&map);

for let mut i=1; i<INSERT_COUNT; i+=1; {
    let point = f(i);
    let key = point as Point;
    let value = make_x_str(i);
    print("Inserting ", key, " -> ");
    putstrln(value);
    HashMap_put<Point, &Char>(&mut map, key, value);
}

print("HashMap after inserting:\n");
HashMap_print<Point, &Char>(&map);

for let mut i=1; i<CHECK_COUNT; i+=1; {
    let point = f(i);
    let key = point as Point;
    print("Retrieving ", key, ": ");

    match HashMap_get<Point, &Char>(&map, key) {
        of Some(value) => {
            putstrln(*value);
            free(*value);
        },
        of Nothing => print("Nothing\n")
    }
}

HashMap_drop<Point, &Char>(&map);