use ::std::str::FromStr;
use crate::{
    side_effects::*,
    asm::{CoreOp, StandardOp, CoreProgram, StandardProgram, Location, FP, GP, SP, A, B, C, D, E, F}
};

grammar;


pub CoreProgram: CoreProgram = CoreOp* => CoreProgram::new(<>);
pub StandardProgram: StandardProgram = StandardOp* => StandardProgram::new(<>);

Label: String = "@" <Symbol> => <>.to_string();
Global: String = "$" <Symbol> => <>.to_string();

CoreOp: CoreOp = {
    "set" <Location> "," <IntLit> => CoreOp::Set(<>),
    "set" <loc: Location> "," <ch: CharLit> => CoreOp::Set(loc, ch as i64),
    "set" <Location> "," <Label> => CoreOp::SetLabel(<>),
    "global" <name: Global> "," <size: IntLit> => CoreOp::Global {
        name,
        size: size as usize,
    },
    "." <name: Global> "," <size: IntLit> => CoreOp::Global {
        name,
        size: size as usize,
    },

    "lea-push" <addr: Location> => CoreOp::PushAddress(addr),
    "lea" <addr: Location> "," <dst: Location> => CoreOp::GetAddress { addr, dst },

    "call" <Location> => CoreOp::Call(<>),
    "call" <Label> => CoreOp::CallLabel(<>),

    "ret" => CoreOp::Return,

    "fun" <Label> => CoreOp::Fn(<>),
    "while" <Location> => CoreOp::While(<>),
    "if" <Location> => CoreOp::If(<>),
    "else" => CoreOp::Else,
    "end" => CoreOp::End,
    
    /// WARNING: `mov` is deprecated, use `copy` instead
    "mov" <src: Location> "," <dst: Location> => CoreOp::Move { src, dst },
    "copy" <src: Location> "," <dst: Location> => CoreOp::Copy { src, dst, size: 1 },
    "copy" <src: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::Copy { src, dst, size: size as usize },
    
    "bitwise-nand" <src: Location> "," <dst: Location> => CoreOp::BitwiseNand { src, dst },
    "bitwise-and" <src: Location> "," <dst: Location> => CoreOp::BitwiseAnd { src, dst },
    "bitwise-xor" <src: Location> "," <dst: Location> => CoreOp::BitwiseXor { src, dst },
    "bitwise-or" <src: Location> "," <dst: Location> => CoreOp::BitwiseOr { src, dst },
    "bitwise-nor" <src: Location> "," <dst: Location> => CoreOp::BitwiseNor { src, dst },
    "bitwise-not" <Location> => CoreOp::BitwiseNot(<>),

    "next" <loc:Location> <size:("," <IntLit>)?> => CoreOp::Next(loc, size.map(|x| x as isize)),
    "prev" <loc:Location> <size:("," <IntLit>)?> => CoreOp::Prev(loc, size.map(|x| x as isize)),

    "index" <src: Location> "," <offset: Location> "," <dst: Location> => CoreOp::Index { src, offset, dst },
    "inc" <Location> => CoreOp::Inc(<>),
    "dec" <Location> => CoreOp::Dec(<>),
    "add" <src: Location> "," <dst: Location> => CoreOp::Add { src, dst },
    "sub" <src: Location> "," <dst: Location> => CoreOp::Sub { src, dst },
    "mul" <src: Location> "," <dst: Location> => CoreOp::Mul { src, dst },
    "div" <src: Location> "," <dst: Location> => CoreOp::Div { src, dst },
    "rem" <src: Location> "," <dst: Location> => CoreOp::Rem { src, dst },
    "div-rem" <src: Location> "," <dst: Location> => CoreOp::DivRem { src, dst },
    "neg" <Location> => CoreOp::Neg(<>),
    "not" <Location> => CoreOp::Not(<>),
    "and" <src: Location> "," <dst: Location> => CoreOp::And { src, dst },
    "or" <src: Location> "," <dst: Location> => CoreOp::Or { src, dst },

    "push" <src: Location> <size: ("," <IntLit>)?> => CoreOp::Push(src, size.unwrap_or(1) as usize),
    "pop" <dst: Location> "," <size: IntLit> => CoreOp::Pop(Some(dst), size as usize),
    "pop" <dst: Location> => CoreOp::Pop(Some(dst), 1),
    "pop" <size: IntLit> => CoreOp::Pop(None, size as usize),
    "pop" => CoreOp::Pop(None, 1),

    "push-to" <src: Location> "," <sp: Location> "," <size: IntLit> => CoreOp::PushTo { src, sp, size: size as usize },
    "pop-from" <sp: Location> <dst: ("," <Location>)?> "," <size: IntLit> => CoreOp::PopFrom { sp, dst, size: size as usize },

    "cmp" <a: Location> "," <b: Location> "," <dst: Location> => CoreOp::Compare { a, b, dst },
    "gt" <a: Location> "," <b: Location> "," <dst: Location> => CoreOp::IsGreater { a, b, dst },
    "gte" <a: Location> "," <b: Location> "," <dst: Location> => CoreOp::IsGreaterEqual { a, b, dst },
    "lt" <a: Location> "," <b: Location> "," <dst: Location> => CoreOp::IsLess { a, b, dst },
    "lte" <a: Location> "," <b: Location> "," <dst: Location> => CoreOp::IsLessEqual { a, b, dst },
    "eq" <a: Location> "," <b: Location> "," <dst: Location> => CoreOp::IsEqual { a, b, dst },
    "neq" <a: Location> "," <b: Location> "," <dst: Location> => CoreOp::IsNotEqual { a, b, dst },

    "get-char" <loc: Location> => CoreOp::Get(loc, Input::stdin_char()),
    "put-char" <loc: Location> => CoreOp::Put(loc, Output::stdout_char()),
    "get-int" <loc: Location> => CoreOp::Get(loc, Input::stdin_int()),
    "put-int" <loc: Location> => CoreOp::Put(loc, Output::stdout_int()),
    "get-float" <loc: Location> => CoreOp::Get(loc, Input::stdin_float()),
    "put-float" <loc: Location> => CoreOp::Put(loc, Output::stdout_float()),
    "put-str" <StringLit> => {
        CoreOp::put_string(<>, Output::stdout_char())
    },
    "put-str" <StringLit> "," <Output> => {
        CoreOp::put_string(<>)
    },
    
    "get" <loc: Location> "," <i: Input> => CoreOp::Get(loc, i),
    "put" <loc: Location> "," <o: Output> => CoreOp::Put(loc, o),
    "const" <dst: Location> "," <vals: List<"[", IntLit, ",", "]">> => CoreOp::Const { dst, vals },
    "push-const" <vals: List<"[", IntLit, ",", "]">> => CoreOp::PushConst(vals),
    "array" <src: Location> "," <vals: List<"[", IntLit, ",", "]">> "," <dst: Location> => CoreOp::Array {
        src, dst, vals
    },
    "array" <src: Location> "," <vals: StringLit> "," <dst: Location> => {
        let mut vals: Vec<i64> = vals.chars().map(|c| c as i64).collect();
        vals.push(0);
        CoreOp::Array { src, dst, vals }
    },

    "lsh" <src: Location> "," <dst: Location> => CoreOp::LeftShift { src, dst },
    "lrsh" <src: Location> "," <dst: Location> => CoreOp::LogicalRightShift { src, dst },
    "arsh" <src: Location> "," <dst: Location> => CoreOp::ArithmeticRightShift { src, dst },

    "vlsh" <src: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::VecLeftShift {
        src, dst, size: size as usize
    },

    "vlrsh" <src: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::VecLogicalRightShift {
        src, dst, size: size as usize
    },

    "varsh" <src: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::VecArithmeticRightShift {
        src, dst, size: size as usize
    },

    "vset" <dst: Location> "," <vals: List<"[", IntLit, ",", "]">> => CoreOp::VecSet(dst, vals),
    "vadd" <src: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::VecAdd {
        src, dst, size: size as usize
    },
    "vsub" <src: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::VecSub {
        src, dst, size: size as usize
    },
    "vmul" <src: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::VecMul {
        src, dst, size: size as usize
    },
    "vdiv" <src: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::VecDiv {
        src, dst, size: size as usize
    },
    "vrem" <src: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::VecRem {
        src, dst, size: size as usize
    },
    "vneg" <dst: Location> "," <size: IntLit> => CoreOp::VecNeg {
        dst, size: size as usize
    },
    "vand" <src: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::VecAnd {
        src, dst, size: size as usize
    },
    "vor" <src: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::VecOr {
        src, dst, size: size as usize
    },
    "vnot" <dst: Location> "," <size: IntLit> => CoreOp::VecNot {
        dst, size: size as usize
    },

    "vinc" <dst: Location> "," <size: IntLit> => CoreOp::VecInc {
        dst, size: size as usize
    },

    "vdec" <dst: Location> "," <size: IntLit> => CoreOp::VecDec {
        dst, size: size as usize
    },

    "vband" <src: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::VecBitwiseAnd {
        src, dst, size: size as usize
    },

    "vbor" <src: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::VecBitwiseOr {
        src, dst, size: size as usize
    },

    "vbxor" <src: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::VecBitwiseXor {
        src, dst, size: size as usize
    },

    "vbnand" <src: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::VecBitwiseNand {
        src, dst, size: size as usize
    },

    "vbnor" <src: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::VecBitwiseNor {
        src, dst, size: size as usize
    },

    "vbnot" <dst: Location> "," <size: IntLit> => CoreOp::VecBitwiseNot {
        dst, size: size as usize
    },

    "vgez" <src: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::VecGez {
        src, dst, size: size as usize
    },

    "vindex" <src: Location> "," <offset: Location> "," <dst: Location> "," <size: IntLit> => CoreOp::VecIndex {
        src, offset, dst, size: size as usize
    },

    "voffset" <dst: Location> "," <offset: IntLit> "," <size: IntLit> => CoreOp::VecOffset {
        offset: offset as isize, dst, size: size as usize
    },
}

StandardOp: StandardOp = {
    CoreOp => StandardOp::CoreOp(<>),

    "call" <FFIBinding> => StandardOp::Call(<>),
    "set-f" <loc: Location> "," <n: IntLit> => StandardOp::Set(loc, n as f64),
    "set-f" <Location> "," <FloatLit> => StandardOp::Set(<>),
    "to-float" <Location> => StandardOp::ToFloat(<>),
    "to-int" <Location> => StandardOp::ToInt(<>),
    
    "pow" <src: Location> "," <dst: Location> => StandardOp::Pow { src, dst },
    "sqrt" <Location> => StandardOp::Sqrt(<>),
    "add-f" <src: Location> "," <dst: Location> => StandardOp::Add { src, dst },
    "sub-f" <src: Location> "," <dst: Location> => StandardOp::Sub { src, dst },
    "mul-f" <src: Location> "," <dst: Location> => StandardOp::Mul { src, dst },
    "div-f" <src: Location> "," <dst: Location> => StandardOp::Div { src, dst },
    "rem-f" <src: Location> "," <dst: Location> => StandardOp::Rem { src, dst },
    "neg-f" <Location> => StandardOp::Neg(<>),

    "sin" <Location> => StandardOp::Sin(<>),
    "cos" <Location> => StandardOp::Cos(<>),
    "tan" <Location> => StandardOp::Tan(<>),
    "asin" <Location> => StandardOp::ASin(<>),
    "acos" <Location> => StandardOp::ACos(<>),
    "atan" <Location> => StandardOp::ATan(<>),

    "gt-f" <a: Location> "," <b: Location> "," <dst: Location> => StandardOp::IsGreater { a, b, dst },
    "lt-f" <a: Location> "," <b: Location> "," <dst: Location> => StandardOp::IsLess { a, b, dst },

    "alloc" <Location> => StandardOp::Alloc(<>),
    "free" <Location> => StandardOp::Free(<>),
    
    "const-f" <dst: Location> "," <vals: List<"[", FloatLit, ",", "]">> => StandardOp::Const { dst, vals },
    "push-const-f" <vals: List<"[", FloatLit, ",", "]">> => StandardOp::PushConst(vals),
    // "peek" <Location> => StandardOp::Peek(<>),
    // "poke" <Location> => StandardOp::Poke(<>),

    "vset-f" <dst: Location> "," <vals: List<"[", FloatLit, ",", "]">> => StandardOp::VecSet(dst, vals),

    "vadd-f" <src: Location> "," <dst: Location> "," <size: IntLit> => StandardOp::VecAdd {
        src, dst, size: size as usize
    },

    "vsub-f" <src: Location> "," <dst: Location> "," <size: IntLit> => StandardOp::VecSub {
        src, dst, size: size as usize
    },

    "vmul-f" <src: Location> "," <dst: Location> "," <size: IntLit> => StandardOp::VecMul {
        src, dst, size: size as usize
    },

    "vdiv-f" <src: Location> "," <dst: Location> "," <size: IntLit> => StandardOp::VecDiv {
        src, dst, size: size as usize
    },

    "vrem-f" <src: Location> "," <dst: Location> "," <size: IntLit> => StandardOp::VecRem {
        src, dst, size: size as usize
    },

    "vneg-f" <dst: Location> "," <size: IntLit> => StandardOp::VecNeg {
        dst, size: size as usize
    },

    "vgez-f" <src: Location> "," <dst: Location> "," <size: IntLit> => StandardOp::VecGez {
        src, dst, size: size as usize
    },

    "vpow" <src: Location> "," <dst: Location> "," <size: IntLit> => StandardOp::VecPow {
        src, dst, size: size as usize
    },

    "vsin" <dst: Location> "," <size: IntLit> => StandardOp::VecSin {
        dst, size: size as usize
    },

    "vcos" <dst: Location> "," <size: IntLit> => StandardOp::VecCos {
        dst, size: size as usize
    },

    "vtan" <dst: Location> "," <size: IntLit> => StandardOp::VecTan {
        dst, size: size as usize
    },

    "vasin" <dst: Location> "," <size: IntLit> => StandardOp::VecASin {
        dst, size: size as usize
    },

    "vacos" <dst: Location> "," <size: IntLit> => StandardOp::VecACos {
        dst, size: size as usize
    },

    "vatan" <dst: Location> "," <size: IntLit> => StandardOp::VecATan {
        dst, size: size as usize
    },
}

Location: Location = {
    "[" <deref: Register> "+" <offset: IntLit> "]" => deref.deref().offset(offset as isize),
    "[" <deref: Register> "-" <offset: IntLit> "]" => deref.deref().offset(-offset as isize),
    "[" <Location> "]" => <>.deref(),

    <location: Location> "(" <offset: IntLit> ")" => location.offset(offset as isize),

    <Global> => Location::Global(<>),
    <Register> => <>
}

Register: Location = {
    "A" => A,
    "B" => B,
    "C" => C,
    "D" => D,
    "E" => E,
    "F" => F,
    "SP" => SP,
    "FP" => FP,
    "GP" => GP
}

FFIBinding: FFIBinding = {
    "ffi" <name: Symbol> "(" <input_cells: IntLit> ")" "->" <output_cells: IntLit> => FFIBinding {
        name,
        input_cells: input_cells as usize,
        output_cells: output_cells as usize,
    },
}

Input: Input = {
    // ///////////////////////////////////////////////////////////////
    // Standard input modes
    // (The standard interface is typically used for command line programs,
    // and for all pipelines between programs)
    ///////////////////////////////////////////////////////////////
    // Standard input (ASCII character)
    "stdin" "." "char" => Input::stdin_char(),
    "stdin" "." "char" <ch: Channel> => Input::new(InputMode::StdinChar, ch),
    // Standard input (integer)
    "stdin" "." "int" => Input::stdin_int(),
    "stdin" "." "int" <ch: Channel> => Input::new(InputMode::StdinInt, ch),
    // Standard input (float)
    "stdin" "." "float" => Input::stdin_float(),
    "stdin" "." "float" <ch: Channel> => Input::new(InputMode::StdinFloat, ch),
    
    ///////////////////////////////////////////////////////////////
    // Special input modes
    ///////////////////////////////////////////////////////////////
    "clock" => Input::clock(),
    
    ///////////////////////////////////////////////////////////////
    // User input modes
    // (These should typically be used for games or other interactive programs)
    ///////////////////////////////////////////////////////////////
    // Input from a D-Pad
    "dpad" "." <dir: Direction> <ch: Channel> => Input::new(InputMode::DPad(dir), ch),
    // Input from a button (0=not pressed, 1=pressed)
    "button" <ch: Channel> => Input::new(InputMode::Button, ch),
    // Input from keyboard (ASCII character)
    "keyboard" "." "char" <ch: Channel> => Input::new(InputMode::StdinChar, ch),
    // Input from a JoyStick the degree of displacement in a given direction (from -128 to 128).
    "joystick" "." <dir: Direction> <ch: Channel> => Input::new(InputMode::JoyStick(dir), ch),


    ///////////////////////////////////////////////////////////////
    // Physical sensor input modes
    // (These should typically be implemented for devices that measure
    // the physical world, like a smart watch or a smart phone)
    ///////////////////////////////////////////////////////////////
    // Time (in seconds) since the program started
    "clock" <ch: Channel> => Input::new(InputMode::Clock, ch),
    // Input from an accelerometer (in meters per second per second) in a given axis
    "accelerometer" "." <axis: Axis> <ch: Channel> => Input::new(InputMode::Accelerometer(axis), ch),
    // Input from a gyroscope (in degrees per second) around a given axis
    "gyrocope" "." <axis: Axis> <ch: Channel> => Input::new(InputMode::Gyroscope(axis), ch),
    // Input from a microphone (frequency in hertz)
    "microphone" <ch: Channel> => Input::new(InputMode::Microphone, ch),

    ///////////////////////////////////////////////////////////////
    // Environment sensor input modes
    // (These should typically be implemented for devices that measure
    // the environment, like a weather station or a smart thermostat)
    ///////////////////////////////////////////////////////////////    
    // Red light intensity (in lux)
    "redlight" <ch:Channel> => Input::new(InputMode::RedLight, ch),
    // Green light intensity (in lux)
    "greenlight" <ch:Channel> => Input::new(InputMode::GreenLight, ch),
    // Blue light intensity (in lux)
    "bluelight" <ch:Channel> => Input::new(InputMode::BlueLight, ch),
    // Input from a light sensor (in lux)
    "brightness" <ch:Channel> => Input::new(InputMode::Brightness, ch),
    // Input from a humidity sensor (in percent)
    "humidity" <ch:Channel> => Input::new(InputMode::Humidity, ch),
    // Input from a barometer (pressure in atmospheres)
    "barometer" <ch:Channel> => Input::new(InputMode::Barometer, ch),
    // Input from a magnetometer (in teslas) in a given axis
    "magnetometer" "." <axis:Axis> <ch:Channel> => Input::new(InputMode::Magnetometer(axis), ch),
    // Input from a thermometer (degrees K)
    "thermometer" <ch:Channel> => Input::new(InputMode::Thermometer, ch),
    // Input from a rain gauge (in millimeters)
    "raingauge" <ch:Channel> => Input::new(InputMode::RainGauge, ch),
    // Input from a UV sensor (in watts per square meter)
    "uvsensor" <ch:Channel> => Input::new(InputMode::UVSensor, ch),
    // Input from a wind speed sensor (in meters per second)
    "windspeed" <ch:Channel> => Input::new(InputMode::WindSpeed, ch),
    // Input from a wind direction sensor (in degrees)
    "winddirection" <ch:Channel> => Input::new(InputMode::WindDirection, ch),

    ///////////////////////////////////////////////////////////////
    // Engineering / Science sensor input modes
    ///////////////////////////////////////////////////////////////
    // Input from a pressure gauge (in atmospheres)
    "pressuregauge" <ch: Channel> => Input::new(InputMode::PressureGauge, ch),
    // Input from a flow sensor (in liters per second)
    "flowsensor" <ch: Channel> => Input::new(InputMode::FlowSensor, ch),
    // Input from a volume sensor (in liters)
    "volumesensor" <ch: Channel> => Input::new(InputMode::VolumeSensor, ch),
    // Input from a weight sensor (in kilograms)
    "weightsensor" <ch: Channel> => Input::new(InputMode::WeightSensor, ch),
    // Input from a pH sensor (in pH)
    "phsensor" <ch: Channel> => Input::new(InputMode::PHSensor, ch),
    // Input from a conductivity sensor (in siemens per meter)
    "conductivitysensor" <ch: Channel> => Input::new(InputMode::ConductivitySensor, ch),

    ///////////////////////////////////////////////////////////////
    // Navigation input modes
    // (These should typically be implemented for devices that use GPS,
    // or for robots)
    ///////////////////////////////////////////////////////////////
    // Input from a speedometer (in meters per second) in a given axis
    "speedometer" "." <axis: Axis> <ch: Channel> => Input::new(InputMode::Speedometer(Some(axis)), ch),
    "speedometer" <ch: Channel> => Input::new(InputMode::Speedometer(None), ch),
    // Input from an odometer (in meters)
    "odometer" <ch: Channel> => Input::new(InputMode::Odometer, ch),
    // Input from a position sensor in a given axis (x, y, z)
    "position" "." <axis: Axis> <ch: Channel> => Input::new(InputMode::Position(axis), ch),
    // Input from a compass (degrees)
    "compass" <ch: Channel> => Input::new(InputMode::Compass, ch),
    // Input from a distance sensor (in meters)
    "proximity" <ch: Channel> => Input::new(InputMode::Proximity, ch),
    // Input from altitude sensor (in meters)
    "altimeter" <ch: Channel> => Input::new(InputMode::Altimeter, ch),
    // Input from depth sensor (in meters)
    "depthsensor" <ch: Channel> => Input::new(InputMode::DepthSensor, ch),

    ///////////////////////////////////////////////////////////////
    // Electrical device input modes
    // (These should typically be used for programs using a GPIO interface,
    // like a Raspberry Pi or Arduino)
    ///////////////////////////////////////////////////////////////
    // Input from an analog input (in volts)
    "analogpin" <ch: Channel> => Input::new(InputMode::AnalogPin, ch),
    // Input from a digital input (0=low, 1=high)
    "digitalpin" <ch: Channel> => Input::new(InputMode::DigitalPin, ch),

    ///////////////////////////////////////////////////////////////
    // Custom output modes
    ///////////////////////////////////////////////////////////////
    // A custom input mode (for use with a custom output device)
    <name:StringLit> <ch: Channel> => Input::new(InputMode::Custom(name), ch),
}

Output: Output = {
    ///////////////////////////////////////////////////////////////
    // Standard output modes
    ///////////////////////////////////////////////////////////////
    // Standard output (ASCII character)
    "stdout" "." "char" => Output::stdout_char(),
    "stdout" "." "char" <ch: Channel> => Output::new(OutputMode::StdoutChar, ch),
    // Standard output (integer)
    "stdout" "." "int" => Output::stdout_int(),
    "stdout" "." "int" <ch: Channel> => Output::new(OutputMode::StdoutInt, ch),
    // Standard output (float)
    "stdout" "." "float" => Output::stdout_float(),
    "stdout" "." "float" <ch: Channel> => Output::new(OutputMode::StdoutFloat, ch),
    // Standard error (ASCII character)
    "stderr" "." "char" => Output::stderr_char(),
    "stderr" "." "char" <ch: Channel> => Output::new(OutputMode::StderrChar, ch),
    // Standard error (integer)
    "stderr" "." "int" => Output::stderr_int(),
    "stderr" "." "int" <ch: Channel> => Output::new(OutputMode::StderrInt, ch),
    // Standard error (float)
    "stderr" "." "float" => Output::stderr_float(),
    "stderr" "." "float" <ch: Channel> => Output::new(OutputMode::StderrFloat, ch),

    ///////////////////////////////////////////////////////////////
    // Alternative output modes for standard output
    ///////////////////////////////////////////////////////////////
    // Printer (ASCII character)
    "printer" "." "char" <ch: Channel> => Output::new(OutputMode::PrinterChar, ch),
    // Printer (integer)
    "printer" "." "int" <ch: Channel> => Output::new(OutputMode::PrinterInt, ch),
    // Printer (float)
    "printer" "." "float" <ch: Channel> => Output::new(OutputMode::PrinterFloat, ch),

    ///////////////////////////////////////////////////////////////
    // Lighting device output modes
    ///////////////////////////////////////////////////////////////
    // Set the brightness of a given light (in percent)
    "brightness" <ch: Channel> => Output::new(OutputMode::Brightness, ch),

    ///////////////////////////////////////////////////////////////
    // Electrical device output modes
    ///////////////////////////////////////////////////////////////
    // Set the voltage of a given analog output
    "analogpin" <ch: Channel> => Output::new(OutputMode::AnalogPin, ch),
    // Set the state of a given digital output (0=low, 1=high)
    "digitalpin" <ch: Channel> => Output::new(OutputMode::DigitalPin, ch),
    
    ///////////////////////////////////////////////////////////////
    // Robotics device output modes
    ///////////////////////////////////////////////////////////////
    // Set the position of a given stepper motor (in radians)
    "steppermotor" <ch: Channel> => Output::new(OutputMode::StepperMotor, ch),
    // Set the polarity of a solenoid (0=off, 1=on)
    "solenoid" <ch: Channel> => Output::new(OutputMode::Solenoid, ch),
    // Set the position of a given valve (0=closed, 1=open)
    "valve" <ch: Channel> => Output::new(OutputMode::Valve, ch),
    // Set the speed of a given motor (in revolutions per minute)
    "motorspeed" <ch: Channel> => Output::new(OutputMode::MotorSpeed, ch),
    // Set the position of a given servo (in radians)
    "servo" <ch: Channel> => Output::new(OutputMode::Servo, ch),
    // Set the temperature of a given heating/cooling device (degrees K)
    "temperature" <ch: Channel> => Output::new(OutputMode::Temperature, ch),
    // Set the pressure of a given pump (in atmospheres)
    "pump" <ch: Channel> => Output::new(OutputMode::Pump, ch),
    // Set the pressure of a given fan (in atmospheres)
    "fan" <ch: Channel> => Output::new(OutputMode::Fan, ch),
    // Set the pressure of a given blower (in atmospheres)
    "blower" <ch: Channel> => Output::new(OutputMode::Blower, ch),
    // Turn a heater on or off (0=off, 1=on)
    "heater" <ch: Channel> => Output::new(OutputMode::Heater, ch),
    // Turn a cooler on or off (0=off, 1=on)
    "cooler" <ch: Channel> => Output::new(OutputMode::Cooler, ch),
    // Set the pressure of a given vacuum/pressurizer (atmospheres)
    "pressure" <ch: Channel> => Output::new(OutputMode::Pressure, ch),

    ///////////////////////////////////////////////////////////////
    // Sound output modes
    ///////////////////////////////////////////////////////////////
    // Ring a given buzzer (in hertz)
    "buzzer" <ch: Channel> => Output::new(OutputMode::Buzzer, ch),
    // Ring a bell (in hertz)
    "bell" <ch: Channel> => Output::new(OutputMode::Bell, ch),
    // Play a given note (in hertz)
    "note" <ch: Channel> => Output::new(OutputMode::Note, ch),
    // Set the volume of a given speaker (in percent)
    "speakervolume" <ch: Channel> => Output::new(OutputMode::SpeakerVolume, ch),
    // Set the frequency of a given speaker (in hertz)
    "speakerfrequency" <ch: Channel> => Output::new(OutputMode::SpeakerFrequency, ch),

    ///////////////////////////////////////////////////////////////
    // Display output modes
    ///////////////////////////////////////////////////////////////
    // Update the display
    "updatedisplay" <ch: Channel> => Output::new(OutputMode::UpdateDisplay, ch),
    // Clear the display
    "cleardisplay" <ch: Channel> => Output::new(OutputMode::ClearDisplay, ch),
    // Set the cursor row on the display
    "setcursorrow" <ch: Channel> => Output::new(OutputMode::SetCursorRow, ch),
    // Set the cursor column on the display
    "setcursorcolumn" <ch: Channel> => Output::new(OutputMode::SetCursorColumn, ch),
    // Move the cursor up on the display
    "movecursorup" <ch: Channel> => Output::new(OutputMode::MoveCursorUp, ch),
    // Move the cursor down on the display
    "movecursordown" <ch: Channel> => Output::new(OutputMode::MoveCursorDown, ch),
    // Move the cursor left on the display
    "movecursorleft" <ch: Channel> => Output::new(OutputMode::MoveCursorLeft, ch),
    // Move the cursor right on the display
    "movecursorright" <ch: Channel> => Output::new(OutputMode::MoveCursorRight, ch),
    // Write a character to the display
    "setcursorchar" "." <c: Color> <ch: Channel> => Output::new(OutputMode::SetCursorChar(c), ch),
    // Set the color of a given pixel on the display
    "setcursorpixel" "." <c: Color> <ch: Channel> => Output::new(OutputMode::SetCursorPixel(c), ch),

    ///////////////////////////////////////////////////////////////
    // Custom output modes
    ///////////////////////////////////////////////////////////////
    // A custom output mode (for use with a custom output device)
    <name: StringLit> <ch: Channel> => Output::new(OutputMode::Custom(name), ch),
}

Color: Color = {
    // Black
    "black" => Color::Black,
    // White
    "white" => Color::White,
    // Red
    "red" => Color::Red,
    // Green
    "green" => Color::Green,
    // Blue
    "blue" => Color::Blue,
    // Yellow
    "yellow" => Color::Yellow,
    // Cyan
    "cyan" => Color::Cyan,
    // Magenta
    "magenta" => Color::Magenta,
    // Orange
    "orange" => Color::Orange,
    // RGB
    "rgb" "(" <r: IntLit> "," <g: IntLit> "," <b: IntLit> ")" => Color::RGB(r as u8, g as u8, b as u8),
}

Axis: Axis = {
    "x" => Axis::X,
    "y" => Axis::Y,
    "z" => Axis::Z,
}
Direction: Direction = {
    "up" => Direction::Up,
    "down" => Direction::Down,
    "left" => Direction::Left,
    "right" => Direction::Right,
}
Channel: usize = "#" <IntLit> => <> as usize;

StringLit: String = <s:r#""(\\.|[^"])*""#> => String::from(&s[1..s.len()-1]).replace("\\\"", "\"").replace("\\n", "\n").replace("\\r", "\r").replace("\\t", "\t").replace("\\0", "\0");
CharLit: char = <s:r#"'(\\.|[^'])'"#> => s.replace("\\'", "'").replace("\\n", "\n").replace("\\r", "\r").replace("\\t", "\t").replace("\\0", "\0").chars().nth(1).unwrap() as char;
IntLit: i64 = <s:r"-?(0|[1-9][0-9]*)"> => i64::from_str(s).unwrap();
FloatLit: f64 = {
    r"-?([1-9][0-9]*|[0])[.]([0-9]+)?" => <>.to_string().parse::<f64>().unwrap(),
}
Symbol: String = r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_string();


Tuple<T>: Vec<T> = {
    "(" <mut list: (<T> ",")+> <end:T?> ")" => {
        match end {
            None => list,
            Some(val) => {
                list.push(val);
                list
            }
        }
    }
}

Array<T>: Vec<T> = List<"[", T, ",", "]"> => <>;
Dict<K, V>: Vec<(K, V)> = List<"{", (<K> ":" <V>), ",", "}"> => <>;

List<Begin, T, Sep, End>: Vec<T> = {
    <first:Begin> <list: (<T> <Sep>)*> <end:T?> <last:End> => {
        match end {
            None => list.iter().map(|(v, s)| v.clone()).collect(),
            Some(val) => {
                let mut list: Vec<_> = list.iter().map(|(v, s)| v.clone()).collect();
                list.push(val);
                list
            }
        }
    }
}